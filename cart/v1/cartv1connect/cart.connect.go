// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cart/v1/cart.proto

package cartv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nexus-commerce/nexus-contracts-go/cart/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShoppingCartServiceName is the fully-qualified name of the ShoppingCartService service.
	ShoppingCartServiceName = "cart.v1.ShoppingCartService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShoppingCartServiceGetCartProcedure is the fully-qualified name of the ShoppingCartService's
	// GetCart RPC.
	ShoppingCartServiceGetCartProcedure = "/cart.v1.ShoppingCartService/GetCart"
	// ShoppingCartServiceAddItemProcedure is the fully-qualified name of the ShoppingCartService's
	// AddItem RPC.
	ShoppingCartServiceAddItemProcedure = "/cart.v1.ShoppingCartService/AddItem"
	// ShoppingCartServiceUpdateItemProcedure is the fully-qualified name of the ShoppingCartService's
	// UpdateItem RPC.
	ShoppingCartServiceUpdateItemProcedure = "/cart.v1.ShoppingCartService/UpdateItem"
	// ShoppingCartServiceRemoveItemProcedure is the fully-qualified name of the ShoppingCartService's
	// RemoveItem RPC.
	ShoppingCartServiceRemoveItemProcedure = "/cart.v1.ShoppingCartService/RemoveItem"
	// ShoppingCartServiceClearCartProcedure is the fully-qualified name of the ShoppingCartService's
	// ClearCart RPC.
	ShoppingCartServiceClearCartProcedure = "/cart.v1.ShoppingCartService/ClearCart"
)

// ShoppingCartServiceClient is a client for the cart.v1.ShoppingCartService service.
type ShoppingCartServiceClient interface {
	GetCart(context.Context, *v1.GetCartRequest) (*v1.GetCartResponse, error)
	AddItem(context.Context, *v1.AddItemRequest) (*v1.AddItemResponse, error)
	UpdateItem(context.Context, *v1.UpdateItemRequest) (*v1.UpdateItemResponse, error)
	RemoveItem(context.Context, *v1.RemoveItemRequest) (*v1.RemoveItemResponse, error)
	ClearCart(context.Context, *v1.ClearCartRequest) (*v1.ClearCartResponse, error)
}

// NewShoppingCartServiceClient constructs a client for the cart.v1.ShoppingCartService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShoppingCartServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShoppingCartServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	shoppingCartServiceMethods := v1.File_cart_v1_cart_proto.Services().ByName("ShoppingCartService").Methods()
	return &shoppingCartServiceClient{
		getCart: connect.NewClient[v1.GetCartRequest, v1.GetCartResponse](
			httpClient,
			baseURL+ShoppingCartServiceGetCartProcedure,
			connect.WithSchema(shoppingCartServiceMethods.ByName("GetCart")),
			connect.WithClientOptions(opts...),
		),
		addItem: connect.NewClient[v1.AddItemRequest, v1.AddItemResponse](
			httpClient,
			baseURL+ShoppingCartServiceAddItemProcedure,
			connect.WithSchema(shoppingCartServiceMethods.ByName("AddItem")),
			connect.WithClientOptions(opts...),
		),
		updateItem: connect.NewClient[v1.UpdateItemRequest, v1.UpdateItemResponse](
			httpClient,
			baseURL+ShoppingCartServiceUpdateItemProcedure,
			connect.WithSchema(shoppingCartServiceMethods.ByName("UpdateItem")),
			connect.WithClientOptions(opts...),
		),
		removeItem: connect.NewClient[v1.RemoveItemRequest, v1.RemoveItemResponse](
			httpClient,
			baseURL+ShoppingCartServiceRemoveItemProcedure,
			connect.WithSchema(shoppingCartServiceMethods.ByName("RemoveItem")),
			connect.WithClientOptions(opts...),
		),
		clearCart: connect.NewClient[v1.ClearCartRequest, v1.ClearCartResponse](
			httpClient,
			baseURL+ShoppingCartServiceClearCartProcedure,
			connect.WithSchema(shoppingCartServiceMethods.ByName("ClearCart")),
			connect.WithClientOptions(opts...),
		),
	}
}

// shoppingCartServiceClient implements ShoppingCartServiceClient.
type shoppingCartServiceClient struct {
	getCart    *connect.Client[v1.GetCartRequest, v1.GetCartResponse]
	addItem    *connect.Client[v1.AddItemRequest, v1.AddItemResponse]
	updateItem *connect.Client[v1.UpdateItemRequest, v1.UpdateItemResponse]
	removeItem *connect.Client[v1.RemoveItemRequest, v1.RemoveItemResponse]
	clearCart  *connect.Client[v1.ClearCartRequest, v1.ClearCartResponse]
}

// GetCart calls cart.v1.ShoppingCartService.GetCart.
func (c *shoppingCartServiceClient) GetCart(ctx context.Context, req *v1.GetCartRequest) (*v1.GetCartResponse, error) {
	response, err := c.getCart.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// AddItem calls cart.v1.ShoppingCartService.AddItem.
func (c *shoppingCartServiceClient) AddItem(ctx context.Context, req *v1.AddItemRequest) (*v1.AddItemResponse, error) {
	response, err := c.addItem.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateItem calls cart.v1.ShoppingCartService.UpdateItem.
func (c *shoppingCartServiceClient) UpdateItem(ctx context.Context, req *v1.UpdateItemRequest) (*v1.UpdateItemResponse, error) {
	response, err := c.updateItem.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// RemoveItem calls cart.v1.ShoppingCartService.RemoveItem.
func (c *shoppingCartServiceClient) RemoveItem(ctx context.Context, req *v1.RemoveItemRequest) (*v1.RemoveItemResponse, error) {
	response, err := c.removeItem.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ClearCart calls cart.v1.ShoppingCartService.ClearCart.
func (c *shoppingCartServiceClient) ClearCart(ctx context.Context, req *v1.ClearCartRequest) (*v1.ClearCartResponse, error) {
	response, err := c.clearCart.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ShoppingCartServiceHandler is an implementation of the cart.v1.ShoppingCartService service.
type ShoppingCartServiceHandler interface {
	GetCart(context.Context, *v1.GetCartRequest) (*v1.GetCartResponse, error)
	AddItem(context.Context, *v1.AddItemRequest) (*v1.AddItemResponse, error)
	UpdateItem(context.Context, *v1.UpdateItemRequest) (*v1.UpdateItemResponse, error)
	RemoveItem(context.Context, *v1.RemoveItemRequest) (*v1.RemoveItemResponse, error)
	ClearCart(context.Context, *v1.ClearCartRequest) (*v1.ClearCartResponse, error)
}

// NewShoppingCartServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShoppingCartServiceHandler(svc ShoppingCartServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shoppingCartServiceMethods := v1.File_cart_v1_cart_proto.Services().ByName("ShoppingCartService").Methods()
	shoppingCartServiceGetCartHandler := connect.NewUnaryHandlerSimple(
		ShoppingCartServiceGetCartProcedure,
		svc.GetCart,
		connect.WithSchema(shoppingCartServiceMethods.ByName("GetCart")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingCartServiceAddItemHandler := connect.NewUnaryHandlerSimple(
		ShoppingCartServiceAddItemProcedure,
		svc.AddItem,
		connect.WithSchema(shoppingCartServiceMethods.ByName("AddItem")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingCartServiceUpdateItemHandler := connect.NewUnaryHandlerSimple(
		ShoppingCartServiceUpdateItemProcedure,
		svc.UpdateItem,
		connect.WithSchema(shoppingCartServiceMethods.ByName("UpdateItem")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingCartServiceRemoveItemHandler := connect.NewUnaryHandlerSimple(
		ShoppingCartServiceRemoveItemProcedure,
		svc.RemoveItem,
		connect.WithSchema(shoppingCartServiceMethods.ByName("RemoveItem")),
		connect.WithHandlerOptions(opts...),
	)
	shoppingCartServiceClearCartHandler := connect.NewUnaryHandlerSimple(
		ShoppingCartServiceClearCartProcedure,
		svc.ClearCart,
		connect.WithSchema(shoppingCartServiceMethods.ByName("ClearCart")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cart.v1.ShoppingCartService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShoppingCartServiceGetCartProcedure:
			shoppingCartServiceGetCartHandler.ServeHTTP(w, r)
		case ShoppingCartServiceAddItemProcedure:
			shoppingCartServiceAddItemHandler.ServeHTTP(w, r)
		case ShoppingCartServiceUpdateItemProcedure:
			shoppingCartServiceUpdateItemHandler.ServeHTTP(w, r)
		case ShoppingCartServiceRemoveItemProcedure:
			shoppingCartServiceRemoveItemHandler.ServeHTTP(w, r)
		case ShoppingCartServiceClearCartProcedure:
			shoppingCartServiceClearCartHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShoppingCartServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShoppingCartServiceHandler struct{}

func (UnimplementedShoppingCartServiceHandler) GetCart(context.Context, *v1.GetCartRequest) (*v1.GetCartResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.ShoppingCartService.GetCart is not implemented"))
}

func (UnimplementedShoppingCartServiceHandler) AddItem(context.Context, *v1.AddItemRequest) (*v1.AddItemResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.ShoppingCartService.AddItem is not implemented"))
}

func (UnimplementedShoppingCartServiceHandler) UpdateItem(context.Context, *v1.UpdateItemRequest) (*v1.UpdateItemResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.ShoppingCartService.UpdateItem is not implemented"))
}

func (UnimplementedShoppingCartServiceHandler) RemoveItem(context.Context, *v1.RemoveItemRequest) (*v1.RemoveItemResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.ShoppingCartService.RemoveItem is not implemented"))
}

func (UnimplementedShoppingCartServiceHandler) ClearCart(context.Context, *v1.ClearCartRequest) (*v1.ClearCartResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.ShoppingCartService.ClearCart is not implemented"))
}
