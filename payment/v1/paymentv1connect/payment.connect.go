// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payment/v1/payment.proto

package paymentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nexus-commerce/nexus-contracts-go/payment/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "payment.v1.PaymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceProcessPaymentProcedure is the fully-qualified name of the PaymentService's
	// ProcessPayment RPC.
	PaymentServiceProcessPaymentProcedure = "/payment.v1.PaymentService/ProcessPayment"
	// PaymentServiceGetPaymentsProcedure is the fully-qualified name of the PaymentService's
	// GetPayments RPC.
	PaymentServiceGetPaymentsProcedure = "/payment.v1.PaymentService/GetPayments"
)

// PaymentServiceClient is a client for the payment.v1.PaymentService service.
type PaymentServiceClient interface {
	ProcessPayment(context.Context, *v1.ProcessPaymentRequest) (*v1.ProcessPaymentResponse, error)
	GetPayments(context.Context, *v1.GetPaymentsRequest) (*v1.GetPaymentsResponse, error)
}

// NewPaymentServiceClient constructs a client for the payment.v1.PaymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := v1.File_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		processPayment: connect.NewClient[v1.ProcessPaymentRequest, v1.ProcessPaymentResponse](
			httpClient,
			baseURL+PaymentServiceProcessPaymentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("ProcessPayment")),
			connect.WithClientOptions(opts...),
		),
		getPayments: connect.NewClient[v1.GetPaymentsRequest, v1.GetPaymentsResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPayments")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	processPayment *connect.Client[v1.ProcessPaymentRequest, v1.ProcessPaymentResponse]
	getPayments    *connect.Client[v1.GetPaymentsRequest, v1.GetPaymentsResponse]
}

// ProcessPayment calls payment.v1.PaymentService.ProcessPayment.
func (c *paymentServiceClient) ProcessPayment(ctx context.Context, req *v1.ProcessPaymentRequest) (*v1.ProcessPaymentResponse, error) {
	response, err := c.processPayment.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetPayments calls payment.v1.PaymentService.GetPayments.
func (c *paymentServiceClient) GetPayments(ctx context.Context, req *v1.GetPaymentsRequest) (*v1.GetPaymentsResponse, error) {
	response, err := c.getPayments.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// PaymentServiceHandler is an implementation of the payment.v1.PaymentService service.
type PaymentServiceHandler interface {
	ProcessPayment(context.Context, *v1.ProcessPaymentRequest) (*v1.ProcessPaymentResponse, error)
	GetPayments(context.Context, *v1.GetPaymentsRequest) (*v1.GetPaymentsResponse, error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := v1.File_payment_v1_payment_proto.Services().ByName("PaymentService").Methods()
	paymentServiceProcessPaymentHandler := connect.NewUnaryHandlerSimple(
		PaymentServiceProcessPaymentProcedure,
		svc.ProcessPayment,
		connect.WithSchema(paymentServiceMethods.ByName("ProcessPayment")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetPaymentsHandler := connect.NewUnaryHandlerSimple(
		PaymentServiceGetPaymentsProcedure,
		svc.GetPayments,
		connect.WithSchema(paymentServiceMethods.ByName("GetPayments")),
		connect.WithHandlerOptions(opts...),
	)
	return "/payment.v1.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceProcessPaymentProcedure:
			paymentServiceProcessPaymentHandler.ServeHTTP(w, r)
		case PaymentServiceGetPaymentsProcedure:
			paymentServiceGetPaymentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) ProcessPayment(context.Context, *v1.ProcessPaymentRequest) (*v1.ProcessPaymentResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.ProcessPayment is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPayments(context.Context, *v1.GetPaymentsRequest) (*v1.GetPaymentsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("payment.v1.PaymentService.GetPayments is not implemented"))
}
