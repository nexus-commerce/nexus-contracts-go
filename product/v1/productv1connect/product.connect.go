// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: product/v1/product.proto

package productv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nexus-commerce/nexus-contracts-go/product/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductCatalogServiceName is the fully-qualified name of the ProductCatalogService service.
	ProductCatalogServiceName = "product.v1.ProductCatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductCatalogServiceGetProductProcedure is the fully-qualified name of the
	// ProductCatalogService's GetProduct RPC.
	ProductCatalogServiceGetProductProcedure = "/product.v1.ProductCatalogService/GetProduct"
	// ProductCatalogServiceListProductsProcedure is the fully-qualified name of the
	// ProductCatalogService's ListProducts RPC.
	ProductCatalogServiceListProductsProcedure = "/product.v1.ProductCatalogService/ListProducts"
	// ProductCatalogServiceCreateProductProcedure is the fully-qualified name of the
	// ProductCatalogService's CreateProduct RPC.
	ProductCatalogServiceCreateProductProcedure = "/product.v1.ProductCatalogService/CreateProduct"
	// ProductCatalogServiceUpdateProductProcedure is the fully-qualified name of the
	// ProductCatalogService's UpdateProduct RPC.
	ProductCatalogServiceUpdateProductProcedure = "/product.v1.ProductCatalogService/UpdateProduct"
	// ProductCatalogServiceDeleteProductProcedure is the fully-qualified name of the
	// ProductCatalogService's DeleteProduct RPC.
	ProductCatalogServiceDeleteProductProcedure = "/product.v1.ProductCatalogService/DeleteProduct"
	// ProductCatalogServiceGetProductBySKUProcedure is the fully-qualified name of the
	// ProductCatalogService's GetProductBySKU RPC.
	ProductCatalogServiceGetProductBySKUProcedure = "/product.v1.ProductCatalogService/GetProductBySKU"
)

// ProductCatalogServiceClient is a client for the product.v1.ProductCatalogService service.
type ProductCatalogServiceClient interface {
	GetProduct(context.Context, *v1.GetProductRequest) (*v1.GetProductResponse, error)
	ListProducts(context.Context, *v1.ListProductsRequest) (*v1.ListProductsResponse, error)
	CreateProduct(context.Context, *v1.CreateProductRequest) (*v1.CreateProductResponse, error)
	UpdateProduct(context.Context, *v1.UpdateProductRequest) (*v1.UpdateProductResponse, error)
	DeleteProduct(context.Context, *v1.DeleteProductRequest) (*v1.DeleteProductResponse, error)
	GetProductBySKU(context.Context, *v1.GetProductBySKURequest) (*v1.GetProductBySKUResponse, error)
}

// NewProductCatalogServiceClient constructs a client for the product.v1.ProductCatalogService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductCatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productCatalogServiceMethods := v1.File_product_v1_product_proto.Services().ByName("ProductCatalogService").Methods()
	return &productCatalogServiceClient{
		getProduct: connect.NewClient[v1.GetProductRequest, v1.GetProductResponse](
			httpClient,
			baseURL+ProductCatalogServiceGetProductProcedure,
			connect.WithSchema(productCatalogServiceMethods.ByName("GetProduct")),
			connect.WithClientOptions(opts...),
		),
		listProducts: connect.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+ProductCatalogServiceListProductsProcedure,
			connect.WithSchema(productCatalogServiceMethods.ByName("ListProducts")),
			connect.WithClientOptions(opts...),
		),
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductCatalogServiceCreateProductProcedure,
			connect.WithSchema(productCatalogServiceMethods.ByName("CreateProduct")),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+ProductCatalogServiceUpdateProductProcedure,
			connect.WithSchema(productCatalogServiceMethods.ByName("UpdateProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[v1.DeleteProductRequest, v1.DeleteProductResponse](
			httpClient,
			baseURL+ProductCatalogServiceDeleteProductProcedure,
			connect.WithSchema(productCatalogServiceMethods.ByName("DeleteProduct")),
			connect.WithClientOptions(opts...),
		),
		getProductBySKU: connect.NewClient[v1.GetProductBySKURequest, v1.GetProductBySKUResponse](
			httpClient,
			baseURL+ProductCatalogServiceGetProductBySKUProcedure,
			connect.WithSchema(productCatalogServiceMethods.ByName("GetProductBySKU")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productCatalogServiceClient implements ProductCatalogServiceClient.
type productCatalogServiceClient struct {
	getProduct      *connect.Client[v1.GetProductRequest, v1.GetProductResponse]
	listProducts    *connect.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	createProduct   *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	updateProduct   *connect.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	deleteProduct   *connect.Client[v1.DeleteProductRequest, v1.DeleteProductResponse]
	getProductBySKU *connect.Client[v1.GetProductBySKURequest, v1.GetProductBySKUResponse]
}

// GetProduct calls product.v1.ProductCatalogService.GetProduct.
func (c *productCatalogServiceClient) GetProduct(ctx context.Context, req *v1.GetProductRequest) (*v1.GetProductResponse, error) {
	response, err := c.getProduct.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ListProducts calls product.v1.ProductCatalogService.ListProducts.
func (c *productCatalogServiceClient) ListProducts(ctx context.Context, req *v1.ListProductsRequest) (*v1.ListProductsResponse, error) {
	response, err := c.listProducts.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CreateProduct calls product.v1.ProductCatalogService.CreateProduct.
func (c *productCatalogServiceClient) CreateProduct(ctx context.Context, req *v1.CreateProductRequest) (*v1.CreateProductResponse, error) {
	response, err := c.createProduct.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpdateProduct calls product.v1.ProductCatalogService.UpdateProduct.
func (c *productCatalogServiceClient) UpdateProduct(ctx context.Context, req *v1.UpdateProductRequest) (*v1.UpdateProductResponse, error) {
	response, err := c.updateProduct.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteProduct calls product.v1.ProductCatalogService.DeleteProduct.
func (c *productCatalogServiceClient) DeleteProduct(ctx context.Context, req *v1.DeleteProductRequest) (*v1.DeleteProductResponse, error) {
	response, err := c.deleteProduct.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetProductBySKU calls product.v1.ProductCatalogService.GetProductBySKU.
func (c *productCatalogServiceClient) GetProductBySKU(ctx context.Context, req *v1.GetProductBySKURequest) (*v1.GetProductBySKUResponse, error) {
	response, err := c.getProductBySKU.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ProductCatalogServiceHandler is an implementation of the product.v1.ProductCatalogService
// service.
type ProductCatalogServiceHandler interface {
	GetProduct(context.Context, *v1.GetProductRequest) (*v1.GetProductResponse, error)
	ListProducts(context.Context, *v1.ListProductsRequest) (*v1.ListProductsResponse, error)
	CreateProduct(context.Context, *v1.CreateProductRequest) (*v1.CreateProductResponse, error)
	UpdateProduct(context.Context, *v1.UpdateProductRequest) (*v1.UpdateProductResponse, error)
	DeleteProduct(context.Context, *v1.DeleteProductRequest) (*v1.DeleteProductResponse, error)
	GetProductBySKU(context.Context, *v1.GetProductBySKURequest) (*v1.GetProductBySKUResponse, error)
}

// NewProductCatalogServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductCatalogServiceHandler(svc ProductCatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productCatalogServiceMethods := v1.File_product_v1_product_proto.Services().ByName("ProductCatalogService").Methods()
	productCatalogServiceGetProductHandler := connect.NewUnaryHandlerSimple(
		ProductCatalogServiceGetProductProcedure,
		svc.GetProduct,
		connect.WithSchema(productCatalogServiceMethods.ByName("GetProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productCatalogServiceListProductsHandler := connect.NewUnaryHandlerSimple(
		ProductCatalogServiceListProductsProcedure,
		svc.ListProducts,
		connect.WithSchema(productCatalogServiceMethods.ByName("ListProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productCatalogServiceCreateProductHandler := connect.NewUnaryHandlerSimple(
		ProductCatalogServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(productCatalogServiceMethods.ByName("CreateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productCatalogServiceUpdateProductHandler := connect.NewUnaryHandlerSimple(
		ProductCatalogServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(productCatalogServiceMethods.ByName("UpdateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productCatalogServiceDeleteProductHandler := connect.NewUnaryHandlerSimple(
		ProductCatalogServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(productCatalogServiceMethods.ByName("DeleteProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productCatalogServiceGetProductBySKUHandler := connect.NewUnaryHandlerSimple(
		ProductCatalogServiceGetProductBySKUProcedure,
		svc.GetProductBySKU,
		connect.WithSchema(productCatalogServiceMethods.ByName("GetProductBySKU")),
		connect.WithHandlerOptions(opts...),
	)
	return "/product.v1.ProductCatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductCatalogServiceGetProductProcedure:
			productCatalogServiceGetProductHandler.ServeHTTP(w, r)
		case ProductCatalogServiceListProductsProcedure:
			productCatalogServiceListProductsHandler.ServeHTTP(w, r)
		case ProductCatalogServiceCreateProductProcedure:
			productCatalogServiceCreateProductHandler.ServeHTTP(w, r)
		case ProductCatalogServiceUpdateProductProcedure:
			productCatalogServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductCatalogServiceDeleteProductProcedure:
			productCatalogServiceDeleteProductHandler.ServeHTTP(w, r)
		case ProductCatalogServiceGetProductBySKUProcedure:
			productCatalogServiceGetProductBySKUHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductCatalogServiceHandler struct{}

func (UnimplementedProductCatalogServiceHandler) GetProduct(context.Context, *v1.GetProductRequest) (*v1.GetProductResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductCatalogService.GetProduct is not implemented"))
}

func (UnimplementedProductCatalogServiceHandler) ListProducts(context.Context, *v1.ListProductsRequest) (*v1.ListProductsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductCatalogService.ListProducts is not implemented"))
}

func (UnimplementedProductCatalogServiceHandler) CreateProduct(context.Context, *v1.CreateProductRequest) (*v1.CreateProductResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductCatalogService.CreateProduct is not implemented"))
}

func (UnimplementedProductCatalogServiceHandler) UpdateProduct(context.Context, *v1.UpdateProductRequest) (*v1.UpdateProductResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductCatalogService.UpdateProduct is not implemented"))
}

func (UnimplementedProductCatalogServiceHandler) DeleteProduct(context.Context, *v1.DeleteProductRequest) (*v1.DeleteProductResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductCatalogService.DeleteProduct is not implemented"))
}

func (UnimplementedProductCatalogServiceHandler) GetProductBySKU(context.Context, *v1.GetProductBySKURequest) (*v1.GetProductBySKUResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductCatalogService.GetProductBySKU is not implemented"))
}
